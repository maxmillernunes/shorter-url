name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  # 🔍 LINT STAGE
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Setup Node.js (LTS 22)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # 3️⃣ Setup pnpm
      - name: Setup pnpm
        run: corepack enable && corepack prepare pnpm@latest --activate

      # 4️⃣ Install dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # 5️⃣ Run ESLint (or your preferred linter)
      - name: Run lint
        run: pnpm lint

  # 🏗️ BUILD STAGE
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: lint # only runs if lint passes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup pnpm
        run: corepack enable && corepack prepare pnpm@latest --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

  # 🧪 UNIT TEST STAGE
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build # depends on build success

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup pnpm
        run: corepack enable && corepack prepare pnpm@latest --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test

  # 🚀 E2E TEST STAGE
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test-unit # only runs after unit tests succeed

    # PostgreSQL service container for testing
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U testuser -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # Environment variable for Prisma connection
    env:
      DATABASE_URL: postgres://testuser:testpassword@localhost:5432/testdb

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup pnpm
        run: corepack enable && corepack prepare pnpm@latest --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Wait for Postgres to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U testuser; do
            echo "Waiting for postgres..."
            sleep 2
          done

      - name: Run Prisma migrations
        run: pnpx prisma migrate deploy

      - name: Run E2E tests
        run: pnpm test:e2e
